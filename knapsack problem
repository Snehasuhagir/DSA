#include <bits/stdc++.h> 
int solverec(vector<int> &weight, vector<int> &value, int index, int capacity){
    //base case
	//if only 1 item to steal , then just compare its weight with the knapsack capacity
	if(index == 0){
	  if(weight[0] <= capacity){
		  return value[0];
	  }	
	  else{
		  return 0;
	  }
	}

	int include = 0;
	if(weight[index] <= capacity){
		include = value[index] + solverec(weight,value,index-1,capacity - weight[index]);
	}
	int exclude = 0 + solverec(weight,value,index-1,capacity);
    int ans = max(include,exclude);
	return ans;
	 	
}

int solveMemo(vector<int> &weight, vector<int> &value, int index, int capacity,vector<vector<int> > &dp){
    //base case
	//if only 1 item to steal , then just compare its weight with the knapsack capacity
	if(index == 0){
	  if(weight[0] <= capacity){
		  return value[0];
	  }	
	  else{
		  return 0;
	  }
	}
    
	if(dp[index][capacity] != -1)
	 return dp[index][capacity];

	int include = 0;
	if(weight[index] <= capacity){
		include = value[index] + solveMemo(weight,value,index-1,capacity - weight[index],dp);
	}
	int exclude = 0 + solveMemo(weight,value,index-1,capacity,dp);
    dp[index][capacity] = max(include,exclude);
	return dp[index][capacity];
	 	
}

int solveTabu(vector<int> &weight, vector<int> &value, int n, int capacity){
    vector<vector<int> > dp(n,vector<int> (capacity+1,0));
	//base case
	for(int w = weight[0] ; w<=capacity ; w++){
		if(weight[0] <= capacity){
			dp[0][w] = value[0];
		}
		else{
			dp[0][w] = 0;
		}
	}
	
	for(int index = 1 ; index<n ; index++){
		for(int w = 0 ; w<=capacity ; w++){
		  int include = 0;
	      if(weight[index] <= w){
		  include = value[index] + dp[index-1][w - weight[index]];
	      }
	      int exclude = 0 + dp[index-1][w];
          dp[index][w] = max(include,exclude);
	      
		}
	}
	return dp[n-1][capacity];
	 	
}

int solvespace(vector<int> &weight, vector<int> &value, int n, int capacity){
    vector<int> prev(capacity+1,0);
	vector<int> curr(capacity+1,0);
	//base case
	for(int w = weight[0] ; w<=capacity ; w++){
		if(weight[0] <= capacity){
			prev[w] = value[0];
		}
		else{
			prev[w] = 0;
		}
	}
	
	for(int index = 1 ; index<n ; index++){
		for(int w = 0 ; w<=capacity ; w++){
		  int include = 0;
	      if(weight[index] <= w){
		  include = value[index] + prev[w - weight[index]];
	      }
	      int exclude = 0 + prev[w];
          curr[w] = max(include,exclude);
	      
		}
		prev = curr;
	}
	return prev[capacity];
	 	
}

int solvespace2(vector<int> &weight, vector<int> &value, int n, int capacity){
	vector<int> curr(capacity+1,0);
	//base case
	for(int w = weight[0] ; w<=capacity ; w++){
		if(weight[0] <= capacity){
			curr[w] = value[0];
		}
		else{
			curr[w] = 0;
		}
	}
	
	for(int index = 1 ; index<n ; index++){
		for(int w = capacity ; w>=0 ; w--){
		  int include = 0;
	      if(weight[index] <= w){
		  include = value[index] + curr[w - weight[index]];
	      }
	      int exclude = 0 + curr[w];
          curr[w] = max(include,exclude);
	      
		}
		
	}
	return curr[capacity];
	 	
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{ 
   //RECURSION	 
	//return solverec(weight,value,n-1,maxWeight);

   //MEMOIZATION
    //vector<vector<int> > dp(n,vector<int> (maxWeight+1,-1));
    // return solveMemo(weight,value,n-1,maxWeight,dp);	

   //TABULATION
    // return solveTabu(weight,value,n,maxWeight);

   //SPACE OPTIMISATION
    //return solvespace(weight,value,n,maxWeight);

   //MORE OPTIMISED
    return solvespace2(weight,value,n,maxWeight);	
}
