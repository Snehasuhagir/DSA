class Solution {
public:
 int solverec(int index,int operationNo,int k ,vector<int>& prices ){
    //base case
    if(index == prices.size())
     return 0;

    if(operationNo == 2*k)
     return 0;

    int profit;

    if(operationNo%2 == 0){
        //buy allowed
        profit = max( (-prices[index] + solverec(index+1,operationNo+1,k,prices)) , (0 + solverec(index+1,operationNo,k,prices)) );
    }  
    else{
        profit = max( (+prices[index] + solverec(index+1,operationNo+1,k,prices)) , (0 + solverec(index+1,operationNo,k,prices)) );
    }
    return profit;
 }

 int solveMemo(int index,int operationNo,int k ,vector<int>& prices,vector<vector<int> >& dp ){
    //base case
    if(index == prices.size())
     return 0;

    if(operationNo == 2*k)
     return 0;
 
    if(dp[index][operationNo] != -1)
     return dp[index][operationNo];

    int profit;

    if(operationNo%2 == 0){
        //buy allowed
        profit = max( (-prices[index] + solveMemo(index+1,operationNo+1,k,prices,dp)) , (0 + solveMemo(index+1,operationNo,k,prices,dp)) );
    }  
    else{
        profit = max( (+prices[index] + solveMemo(index+1,operationNo+1,k,prices,dp)) , (0 + solveMemo(index+1,operationNo,k,prices,dp)) );
    }
    return dp[index][operationNo] = profit;
 }

 int solveTabu(int k, vector<int>& prices){
    int n = prices.size();
    vector<vector<int> > dp(n+1,vector<int>(2*k+1,0));

    for(int index = n-1 ; index>=0 ; index--){
        for(int operationNo = 0 ; operationNo<2*k ; operationNo++){
         int profit;

         if(operationNo%2 == 0){
         //buy allowed
          profit = max( (-prices[index] + dp[index+1][operationNo+1]) , (0 + dp[index+1][operationNo]) );
         }  
         else{
          profit = max( (+prices[index] + dp[index+1][operationNo+1]) , (0 + dp[index+1][operationNo]) );
         }
         dp[index][operationNo] = profit;
        }
    }
    return dp[0][0];
 }
 int solvespace(int k, vector<int>& prices){
    int n = prices.size();
    vector<int> curr(2*k+1,0);
    vector<int> next(2*k+1,0);

    for(int index = n-1 ; index>=0 ; index--){
        for(int operationNo = 0 ; operationNo<2*k ; operationNo++){
         int profit;

         if(operationNo%2 == 0){
         //buy allowed
          profit = max( (-prices[index] + next[operationNo+1]) , (0 + next[operationNo]) );
         }  
         else{
          profit = max( (+prices[index] + next[operationNo+1]) , (0 + next[operationNo]) );
         }
         curr[operationNo] = profit;
        }
        next = curr;
    }
    return next[0];
 }
    int maxProfit(int k, vector<int>& prices) {
        //RECURSION
         //return solverec(0,0,k,prices);

        //MEMOIZATION
        //int n = prices.size();
         //vector<vector<int> > dp(n+1,vector<int>(2*k,-1));
          //return solveMemo(0,0,k,prices,dp); 

        //TABULATION
         //return solveTabu(k,prices);  
        
        //SPACE OPTIMISATION
         return solvespace(k,prices);  
    }
    
};
