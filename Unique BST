class Solution {
public:
   int solverec(int n){
    //base case
    if(n <= 1)
     return 1;

    int ans = 0;
    //think i as root node
    for(int i=1 ; i<=n ; i++){
       ans += solverec(i-1) * solverec(n-i);
    } 
    return ans;  
   }

   int solveMemo(int n,vector<int>& dp){
    //base case
    if(n <= 1)
     return 1;
     
    if(dp[n] != -1)
     return dp[n];

    int ans = 0;
    //think i as root node
    for(int i=1 ; i<=n ; i++){
       ans += solveMemo(i-1,dp) * solveMemo(n-i,dp);
    } 
    return dp[n] = ans;  
   }

   int solveTabu(int n){
    vector<int> dp(n+1,0);

    dp[0] = dp[1] = 1;

    //i-> number of nodes
    for(int i=2 ; i<=n ; i++){
        //j->root node
        for(int j=1 ; j<=i ; j++){
            dp[i] += dp[j-1]*dp[i-j];
        }
    }
    return dp[n];
   }
    int numTrees(int n) {
      //RECURSION
       //return solverec(n); 

      //MEMOIZATION
       //vector<int> dp(n+1,-1);
        //return solveMemo(n,dp); 

      //TABULATION
       return solveTabu(n);  
    }
};
