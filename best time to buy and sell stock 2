class Solution {
public:
   int solverec(int index,int buy,vector<int>& prices){
    //base case
    if(index == prices.size())
     return 0;

    int profit = 0;
    if(buy){
        //buy =1
        profit = max( (-prices[index] + solverec(index+1,0,prices)) , (0 + solverec(index+1,1,prices)) );
    }
    else{
        //buy 0
        profit = max( (+prices[index] + solverec(index+1,1,prices)) , (0 + solverec(index+1,0,prices)) );
    }
    return profit; 
   }

   int solveMemo(int index,int buy,vector<int>& prices,vector<vector<int> >& dp){
    //base case
    if(index == prices.size())
     return 0;
   
    if(dp[index][buy] != -1)
     return dp[index][buy];

    int profit = 0;
    if(buy){
        //buy =1
        profit = max( (-prices[index] + solveMemo(index+1,0,prices,dp)) , (0 + solveMemo(index+1,1,prices,dp)) );
    }
    else{
        //buy 0
        profit = max( (+prices[index] + solveMemo(index+1,1,prices,dp)) , (0 + solveMemo(index+1,0,prices,dp)) );
    }
    return dp[index][buy] =  profit; 
   }

   int solveTabu(vector<int>& prices){
    int n = prices.size();
    vector<vector<int> > dp(n+1,vector<int>(2,0));

    for(int index = n-1 ; index>=0 ; index--){
        for(int buy = 0 ; buy<=1 ; buy++){
            int profit = 0;
            if(buy){
            //buy =1
             profit = max( (-prices[index] + dp[index+1][0]) , (0 + dp[index+1][1]) );
            }
            else{
            //buy 0
             profit = max( (+prices[index] + dp[index+1][1]) , (0 + dp[index+1][0]) );
            }
            dp[index][buy] =  profit; 
        }
    }
     return dp[0][1];
    }
   
    int solvespace(vector<int>& prices){
    int n = prices.size();
    vector<int> curr(2,0);
    vector<int> next(2,0);

    for(int index = n-1 ; index>=0 ; index--){
        for(int buy = 0 ; buy<=1 ; buy++){
            int profit = 0;
            if(buy){
            //buy =1
             profit = max( (-prices[index] + next[0]) , (0 + next[1]) );
            }
            else{
            //buy 0
             profit = max( (+prices[index] + next[1]) , (0 + next[0]) );
            }
            curr[buy] =  profit; 
        }
        next = curr;
    }
     return next[1];
    }
    int maxProfit(vector<int>& prices) {
       //RECURSION 
        //return solverec(0,1,prices);
       
       //MEMOIZATION
        //int n = prices.size();
        //vector<vector<int> > dp(n+1,vector<int>(2,-1));
         //return solveMemo(0,1,prices,dp);

       //TABULATION
        //return solveTabu(prices);  

       //SPACE OPTIMISATION
        return solvespace(prices);   
    }
};
