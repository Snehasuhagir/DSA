class Solution {
public:
    int solverec(vector<int>& satisfaction,int index,int time){
        //base case
        if(index == satisfaction.size())
         return 0;

        int include = satisfaction[index] * time + solverec(satisfaction,index+1,time+1);
        int exclude = 0 + solverec(satisfaction,index+1,time);

        return max(include,exclude); 
    }

    int solveMemo(vector<int>& satisfaction,int index,int time,vector<vector<int> >& dp){
        //base case
        if(index == satisfaction.size())
         return 0;
        
        if(dp[index][time] != -1)
         return dp[index][time];

        int include = satisfaction[index] * time + solveMemo(satisfaction,index+1,time+1,dp);
        int exclude = 0 + solveMemo(satisfaction,index+1,time,dp);

        dp[index][time] = max(include,exclude);
        return dp[index][time];
    }

    int solveTabu(vector<int>& satisfaction){
        int n = satisfaction.size();
        vector<vector<int> > dp(n+1,vector<int>(n+1,0));
        
        for(int index = n-1 ; index>=0 ; index--){
           for(int time = index ; time >= 0 ; time--){
             int include = (satisfaction[index]) * (time+1) + dp[index+1][time+1];
             int exclude = 0 + dp[index+1][time];

             dp[index][time] = max(include,exclude);
           }
        }
        return dp[0][0];
    }

    int solvespace(vector<int>& satisfaction){
        int n = satisfaction.size();
        vector<int> curr(n+1,0);
        vector<int> next(n+1,0);
        for(int index = n-1 ; index>=0 ; index--){
           for(int time = index ; time >= 0 ; time--){
             int include = (satisfaction[index]) * (time+1) + next[time+1];
             int exclude = 0 + next[time];

             curr[time] = max(include,exclude);
           }
           next = curr;
        }
        return next[0];
    } 
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        //RECURSION
         //return solverec(satisfaction,0,1);
        
        //MEMOIZATION
         //int n = satisfaction.size();
         //vector<vector<int> > dp(n+1,vector<int>(n+1,-1));
          //return solveMemo(satisfaction,0,1,dp);

        //TABULATION
         //return solveTabu(satisfaction);  

        //SPACE OPTIMISATION
         return solvespace(satisfaction); 
    }
};
