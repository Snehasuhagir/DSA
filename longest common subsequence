class Solution {
public:
int solverec(string& a, string& b,int i,int j){
    //base case
     if(i == a.length())
      return 0;

     if(j == b.length())
      return 0;

     int ans = 0;
     if(a[i] == b[j]){
        ans = 1 + solverec(a,b,i+1,j+1); 
     }  
     else{
        //not matching
        ans = max(solverec(a,b,i,j+1),solverec(a,b,i+1,j));
     }
     return ans;
}


int solveMemo(string& a, string& b,int i,int j,vector<vector<int> >& dp){
    //base case
     if(i == a.length())
      return 0;

     if(j == b.length())
      return 0;
 
    if(dp[i][j] != -1)
     return dp[i][j];

     int ans = 0;
     if(a[i] == b[j]){
        ans = 1 + solveMemo(a,b,i+1,j+1,dp); 
     }  
     else{
        //not matching
        ans = max(solveMemo(a,b,i,j+1,dp),solveMemo(a,b,i+1,j,dp));
     }
     return dp[i][j] = ans;
}

int solveTabu(string a,string b){
    int n = a.size();
    int m = b.size(); 
    vector<vector<int> > dp(n+1,vector<int>(m+1,0));
    
    for(int i=n-1 ; i>=0 ; i--){
        for(int j=m-1 ; j>=0 ; j--){
            int ans = 0;
            if(a[i] == b[j]){
             ans = 1 + dp[i+1][j+1]; 
            }  
            else{
            //not matching
             ans = max(dp[i][j+1],dp[i+1][j]);
            }
            dp[i][j] = ans;
        }
    }
    return dp[0][0];
}

int solvespace(string a,string b){
    int n = a.size();
    int m = b.size(); 
    vector<int> curr(m+1,0);
    vector<int> next(m+1,0);
    
    for(int i=n-1 ; i>=0 ; i--){
        for(int j=m-1 ; j>=0 ; j--){
            int ans = 0;
            if(a[i] == b[j]){
             ans = 1 + next[j+1]; 
            }  
            else{
            //not matching
             ans = max(curr[j+1],next[j]);
            }
            curr[j] = ans;
        }
        next = curr;
    }
    return next[0];
}
    int longestCommonSubsequence(string text1, string text2) {
        //RECURSION
         //return solverec(text1,text2,0,0);

        //MEMOIZATION
        //int n = text1.size();
        //int m = text2.size(); 
         //vector<vector<int> > dp(n,vector<int>(m,-1));
          //return solveMemo(text1,text2,0,0,dp); 

        //TABULATION
         //return solveTabu(text1,text2);  

        //SPACE OPTIMISATION
         return solvespace(text1,text2);   
    }
};
