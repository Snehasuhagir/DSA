
class Solution{
public:
    int solverec (vector<vector<int>> &mat,int i ,int j ,int &maxi){
        //base case
        if(i >=mat.size() || j >= mat[0].size()){
            return 0;
        }
        
        int right = solverec(mat,i,j+1,maxi);
        int diagonal = solverec(mat,i+1,j+1,maxi);
        int down = solverec(mat,i+1,j,maxi);
        
        if(mat[i][j] == 1){
            int ans = 1 + min(right,min(diagonal,down));
            maxi = max(maxi,ans);
            return ans;
        }
        else{
            return 0;
        }
    }
    
    int solveMemo(vector<vector<int>> &mat,int i ,int j ,int &maxi,vector<vector<int> > &dp){
        //base case
        if(i >=mat.size() || j >= mat[0].size()){
            return 0;
        }
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int right = solveMemo(mat,i,j+1,maxi,dp);
        int diagonal = solveMemo(mat,i+1,j+1,maxi,dp);
        int down = solveMemo(mat,i+1,j,maxi,dp);
        
        if(mat[i][j] == 2){
            dp[i][j] = 1 + min(right,min(diagonal,down));
            maxi = max(maxi,dp[i][j]);
            return dp[i][j];
        }
        else{
            return dp[i][j] = 0;
        }
    }
    
    int solveTabu(vector<vector<int>> &mat,int &maxi){
        int row = mat.size();
        int col = mat[0].size();
        vector<vector<int> > dp(row+1,vector<int>(col+1,0));
        
        for(int i = row-1 ; i >= 0 ; i--){
            for(int j = col-1 ; j >= 0 ; j--){
                int right = dp[i][j+1];
                int diagonal = dp[i+1][j+1];
                int down = dp[i+1][j];
        
                if(mat[i][j] == 1){
                 dp[i][j] = 1 + min(right,min(diagonal,down));
                 maxi = max(maxi,dp[i][j]);
                } 
                else{
                 dp[i][j] = 0;
                }
            }
        }
        return dp[0][0];
    }
    
    int solvespace(vector<vector<int>> &mat,int &maxi){
        int row = mat.size();
        int col = mat[0].size();
       
        vector<int> curr(col+1,0);
        vector<int> next(col+1,0);
        for(int i = row-1 ; i >= 0 ; i--){
            for(int j = col-1 ; j >= 0 ; j--){
                int right = curr[j+1];
                int diagonal = next[j+1];
                int down = next[j];
        
                if(mat[i][j] == 1){
                 curr[j] = 1 + min(right,min(diagonal,down));
                 maxi = max(maxi,curr[j]);
                } 
                else{
                 curr[j] = 0;
                }
            }
             next = curr;
        }
        return next[0];
    }
    int maxSquare(int n, int m, vector<vector<int>> mat){
       //RECURSION    
       //int maxi = 0;
       //solverec(mat,0,0,maxi);
       
       //return maxi;
       
       //MEMOIZATION
        //int maxi = 0;
        //vector<vector<int> > dp(n,vector<int>(m,-1));
        //solveMemo(mat,0,0,maxi,dp);
       
        //return maxi;
        
       //TABULATION
        //int maxi = 0;
        //solveTabu(mat,maxi);
       
        //return maxi;
        
       //SPACE OPTIMISATION
        int maxi = 0;
        solvespace(mat,maxi);
       
        return maxi;
    }
};
