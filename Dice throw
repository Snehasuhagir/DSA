  class Solution {
  public:
   long long solverec(int dice , int faces , int target){
       //base case
        if(target < 0)
         return 0;
         
        if(dice == 0  &&  target != 0)
         return 0;
         
        if(target == 0  &&  dice != 0)
         return 0;
         
        if(dice == 0  &&  target == 0)
         return 1;
         
        long long ans = 0;
        for(int i=1 ; i<=faces ; i++){
            ans = ans + solverec(dice - 1,faces,target - i);
        }
        
        return ans;
   }
   
   long long solveMemo(int dice , int faces , int target,vector<vector<long long> >& dp){
       //base case
        if(target < 0)
         return 0;
         
        if(dice == 0  &&  target != 0)
         return 0;
         
        if(target == 0  &&  dice != 0)
         return 0;
         
        if(dice == 0  &&  target == 0)
         return 1;
        
        if(dp[dice][target] != -1)
         return dp[dice][target];
         
        long long ans = 0;
        for(int i=1 ; i<=faces ; i++){
            ans = ans + solveMemo(dice - 1,faces,target - i,dp);
        }
        dp[dice][target] = ans;
        return dp[dice][target];
    }    
    
    long long solveTabu(int d , int faces , int t){
        vector<vector<long long> > dp(d+1,vector<long long>(t+1,0));
        //after analysing base case
        dp[0][0] = 1;
        
        for(int dice = 1 ; dice<=d ; dice++){
            for(int target = 1 ; target<=t ; target++){
                long long ans = 0;
                for(int i=1 ; i<=faces ; i++){
                 if(target - i >= 0) 
                  ans = ans +dp[dice - 1][target - i];
                }
                dp[dice][target] = ans;
            }
        }
        return dp[d][t];
    }
    
    long long solvespace(int d , int faces , int t){
        vector<long long> prev(t+1,0);
        vector<long long> curr(t+1,0);
        //after analysing base case
        prev[0] = 1;
        
        for(int dice = 1 ; dice<=d ; dice++){
            for(int target = 1 ; target<=t ; target++){
                long long ans = 0;
                for(int i=1 ; i<=faces ; i++){
                 if(target - i >= 0) 
                  ans = ans + prev[target - i];
                }
                curr[target] = ans;
            }
            prev = curr;
        }
        return prev[t];
    }
    long long noOfWays(int M , int N , int X) {
       //RECURSION    
        //return solverec(N,M,X);
        
       //MEMOIZATION
        //vector<vector<long long> > dp(N+1,vector<long long>(X+1,-1));
         //return solveMemo(N,M,X,dp);
         
       //TABULATION
        //return solveTabu(N,M,X);
        
       //SPACE OPTIMISATION
        return solvespace(N,M,X);
    }
};
