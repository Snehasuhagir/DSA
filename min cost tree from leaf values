class Solution {
public:
   int solverec(vector<int>& arr,map<pair<int,int>, int>& maxi,int left,int right){
     //base case
     if(left == right)
      return 0;
 
     int ans = INT_MAX;
     for(int i = left ; i<right ; i++){
       ans = min(ans,maxi[{left,i}]*maxi[{i+1,right}] + solverec(arr,maxi,left,i) + solverec(arr,maxi,i+1,right));
     } 
     return ans;
   }

   int solveMemo(vector<int>& arr,map<pair<int,int>, int>& maxi,int left,int right,vector<vector<int> >& dp){
     //base case
     if(left == right)
      return 0;
 
     if(dp[left][right] != -1)
      return dp[left][right];

     int ans = INT_MAX;
     for(int i = left ; i<right ; i++){
       ans = min(ans,maxi[{left,i}]*maxi[{i+1,right}] + solveMemo(arr,maxi,left,i,dp) + solveMemo(arr,maxi,i+1,right,dp));
     } 
     return dp[left][right] = ans;
   }

   int solveTabu(vector<int>& arr,map<pair<int,int>, int>& maxi){
    int n = arr.size();
    vector<vector<int> >dp(n+1,vector<int>(n+1,0));

    for(int left = n-1 ; left>=0 ; left--){
        for(int right = left ; right<n ; right++){
            if(left == right)
             continue;

            else{
              int ans = INT_MAX;
              for(int i = left ; i<right ; i++){
               ans = min(ans,maxi[{left,i}]*maxi[{i+1,right}] + dp[left][i] + dp[i+1][right]);
              } 
              dp[left][right] = ans;
            } 
        }
    }
    return dp[0][n-1];
   }
    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int,int>, int> maxi;

         for(int i=0 ; i<arr.size() ; i++){
            maxi[{i,i}] = arr[i];
            for(int j=i+1 ; j<arr.size() ; j++){
                maxi[{i,j}] = max(arr[j],maxi[{i,j-1}]);
            }
         }
        //RECURSION 
        //return solverec(arr,maxi,0,arr.size()-1);

       //MEMOIZATION
       //int n = arr.size();
        //vector<vector<int> >dp(n+1,vector<int>(n+1,-1));
         //return solveMemo(arr,maxi,0,arr.size()-1,dp);

       //TABULATION
        return solveTabu(arr,maxi);  
    }
};
